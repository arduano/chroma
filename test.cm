fn test(a: number) {
    a + 1;
    let b = 1;

    if (a > a) {
        a + 2;
        b = 2;
    } else {
        a + 1;
        b = 3;
    }

    return b;
}

// type A = {
//     a: {
//         a: {
//             a: C
//         },
//         b: string
//     }
// };

// type C = D;
// type D = A;

// type B = {
//     a: {
//         a: B,
//     },
// };

// type Foo = { a: string, rec: Foo | string } | number | Bar | string;
// type Bar = { a: "string", rec: Bar };

// type A = Bar;

// type B = Foo;

// type Foo = (1 | 2 | 3 | 4 | 5) % 1;
// type Bar = 0 | 1;

// type A = Foo extends Bar;
// type B = true;

// type fn Test(Val) {
//     return {
//         val: Val,
//     };
// }
